# install.packages("rstan", dependencies = TRUE)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
file_path <- paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/")
source(paste0(file_path, "GMM_code.R"))
generate_Bayesian_GMM_Features <- function(df){
df$cpi_lead <- lead(df$cpi, 1)
df$cpi_lag <- lag(df$cpi, 1)
df <- df %>% na.omit()
return(df)
}
df <- GMM_data_download("PL")
df <- Calculate_Output_Gap(df)
df <- generate_Bayesian_GMM_Features(df)
N <- nrow(df)
stan_data <- list(
N = N,
pi_t = df$cpi,
pi_lead1 = df$cpi_lead,
pi_lag1 = df$cpi_lag,
x_t = df$output_gap
)
fit <- stan(
file = paste0(file_path, "nkpc.stan"),
data = stan_data,
iter = 2000,
warmup = 500,
chains = 4,
seed = 123
)
print(fit, pars = c("beta", "kappa", "sigma"))
plot(fit, pars = c("beta", "kappa"))
pairs(fit, pars = c("beta", "kappa"))
stan_summary <- summary(fit, pars = c("beta", "kappa", "sigma"))$summary
View(stan_data)
View(stan_summary)
stan_summary <- summary(fit, pars = c("beta", "kappa", "sigma"))$summary |>
as.data.frame()
View(stan_summary)
stan_summary$country <- "PL"
View(stan_summary)
# install.packages("rstan", dependencies = TRUE)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
file_path <- paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/")
source(paste0(file_path, "GMM_code.R"))
generate_Bayesian_GMM_Features <- function(df){
df$cpi_lead <- lead(df$cpi, 1)
df$cpi_lag <- lag(df$cpi, 1)
df <- df %>% na.omit()
return(df)
}
gemerate_Bayesian_Model <- function(df){
N <- nrow(df)
stan_data <- list(
N = N,
pi_t = df$cpi,
pi_lead1 = df$cpi_lead,
pi_lag1 = df$cpi_lag,
x_t = df$output_gap
)
fit <- stan(
file = paste0(file_path, "nkpc.stan"),
data = stan_data,
iter = 2000,
warmup = 500,
chains = 4,
seed = 123
)
stan_summary <- summary(fit, pars = c("beta", "kappa", "sigma"))$summary |>
as.data.frame()
return(stan_summary)
}
gather_Bayesian_Parameters(){
gather_Bayesian_Parameters(){
# install.packages("rstan", dependencies = TRUE)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
file_path <- paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/")
source(paste0(file_path, "GMM_code.R"))
generate_Bayesian_GMM_Features <- function(df){
df$cpi_lead <- lead(df$cpi, 1)
df$cpi_lag <- lag(df$cpi, 1)
df <- df %>% na.omit()
return(df)
}
gemerate_Bayesian_Model <- function(df){
N <- nrow(df)
stan_data <- list(
N = N,
pi_t = df$cpi,
pi_lead1 = df$cpi_lead,
pi_lag1 = df$cpi_lag,
x_t = df$output_gap
)
fit <- stan(
file = paste0(file_path, "nkpc.stan"),
data = stan_data,
iter = 2000,
warmup = 500,
chains = 4,
seed = 123
)
stan_summary <- summary(fit, pars = c("beta", "kappa", "sigma"))$summary |>
as.data.frame()
return(stan_summary)
}
gather_Bayesian_Parameters <- function(){
models_collection <- c()
countries <- c("AT", "BE", "BG", "HR", "CY", "CZ", "DK", "EE", "FI", "FR",
"DE", "GR", "HU", "IE", "IT", "LV", "LT", "LU", "MT",
"NL", "PL", "PT", "RO", "SK", "SI", "ES")
for (country in countries) {
df <- GMM_data_download("PL")
df <- Calculate_Output_Gap(df)
df <- generate_Bayesian_GMM_Features(df)
model <- gemerate_Bayesian_Model(df)
model$country <- country
models_collection <- rbind(models_collection, model)
}
write.csv(models_collection, file = paste0(file_path, "Bayesian_GMM_Parameters.csv"), row.names = FALSE)
}
if (sys.nframe() == 0) {
gather_Bayesian_Parameters()
}
# install.packages("rstan", dependencies = TRUE)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
file_path <- paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/")
source(paste0(file_path, "GMM_code.R"))
generate_Bayesian_GMM_Features <- function(df){
df$cpi_lead <- lead(df$cpi, 1)
df$cpi_lag <- lag(df$cpi, 1)
df <- df %>% na.omit()
return(df)
}
gemerate_Bayesian_Model <- function(df){
N <- nrow(df)
stan_data <- list(
N = N,
pi_t = df$cpi,
pi_lead1 = df$cpi_lead,
pi_lag1 = df$cpi_lag,
x_t = df$output_gap
)
fit <- stan(
file = paste0(file_path, "nkpc.stan"),
data = stan_data,
iter = 2000,
warmup = 500,
chains = 4,
seed = 123
)
stan_summary <- summary(fit, pars = c("beta", "kappa", "sigma"))$summary |>
as.data.frame()
return(stan_summary)
}
gather_Bayesian_Parameters <- function(){
models_collection <- c()
countries <- c("AT", "BE", "BG", "HR", "CY", "CZ", "DK", "EE", "FI", "FR",
"DE", "GR", "HU", "IE", "IT", "LV", "LT", "LU", "MT",
"NL", "PL", "PT", "RO", "SK", "SI", "ES")
print(country)
for (country in countries) {
df <- GMM_data_download(country)
df <- Calculate_Output_Gap(df)
df <- generate_Bayesian_GMM_Features(df)
model <- gemerate_Bayesian_Model(df)
model$country <- country
models_collection <- rbind(models_collection, model)
}
write.csv(models_collection, file = paste0(file_path, "Bayesian_GMM_Parameters.csv"), row.names = TRUE)))
# install.packages("rstan", dependencies = TRUE)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
file_path <- paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/")
source(paste0(file_path, "GMM_code.R"))
generate_Bayesian_GMM_Features <- function(df){
df$cpi_lead <- lead(df$cpi, 1)
df$cpi_lag <- lag(df$cpi, 1)
df <- df %>% na.omit()
return(df)
}
gemerate_Bayesian_Model <- function(df){
N <- nrow(df)
stan_data <- list(
N = N,
pi_t = df$cpi,
pi_lead1 = df$cpi_lead,
pi_lag1 = df$cpi_lag,
x_t = df$output_gap
)
fit <- stan(
file = paste0(file_path, "nkpc.stan"),
data = stan_data,
iter = 2000,
warmup = 500,
chains = 4,
seed = 123
)
stan_summary <- summary(fit, pars = c("beta", "kappa", "sigma"))$summary |>
as.data.frame()
return(stan_summary)
}
gather_Bayesian_Parameters <- function(){
models_collection <- c()
countries <- c("AT", "BE", "BG", "HR", "CY", "CZ", "DK", "EE", "FI", "FR",
"DE", "GR", "HU", "IE", "IT", "LV", "LT", "LU", "MT",
"NL", "PL", "PT", "RO", "SK", "SI", "ES")
print(country)
for (country in countries) {
df <- GMM_data_download(country)
df <- Calculate_Output_Gap(df)
df <- generate_Bayesian_GMM_Features(df)
model <- gemerate_Bayesian_Model(df)
model$country <- country
models_collection <- rbind(models_collection, model)
}
write.csv(models_collection, file = paste0(file_path, "Bayesian_GMM_Parameters.csv", row.names = TRUE)))
# install.packages("rstan", dependencies = TRUE)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
file_path <- paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/")
source(paste0(file_path, "GMM_code.R"))
generate_Bayesian_GMM_Features <- function(df){
df$cpi_lead <- lead(df$cpi, 1)
df$cpi_lag <- lag(df$cpi, 1)
df <- df %>% na.omit()
return(df)
}
gemerate_Bayesian_Model <- function(df){
N <- nrow(df)
stan_data <- list(
N = N,
pi_t = df$cpi,
pi_lead1 = df$cpi_lead,
pi_lag1 = df$cpi_lag,
x_t = df$output_gap
)
fit <- stan(
file = paste0(file_path, "nkpc.stan"),
data = stan_data,
iter = 2000,
warmup = 500,
chains = 4,
seed = 123
)
stan_summary <- summary(fit, pars = c("beta", "kappa", "sigma"))$summary |>
as.data.frame()
return(stan_summary)
}
gather_Bayesian_Parameters <- function(){
models_collection <- c()
countries <- c("AT", "BE", "BG", "HR", "CY", "CZ", "DK", "EE", "FI", "FR",
"DE", "GR", "HU", "IE", "IT", "LV", "LT", "LU", "MT",
"NL", "PL", "PT", "RO", "SK", "SI", "ES")
print(country)
for (country in countries) {
df <- GMM_data_download(country)
df <- Calculate_Output_Gap(df)
df <- generate_Bayesian_GMM_Features(df)
model <- gemerate_Bayesian_Model(df)
model$country <- country
models_collection <- rbind(models_collection, model)
}
write.csv(models_collection, file = paste0(file_path, "Bayesian_GMM_Parameters.csv", row.names = TRUE))
}
if (sys.nframe() == 0) {
gather_Bayesian_Parameters()
}
# install.packages("rstan", dependencies = TRUE)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
file_path <- paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/")
source(paste0(file_path, "GMM_code.R"))
generate_Bayesian_GMM_Features <- function(df){
df$cpi_lead <- lead(df$cpi, 1)
df$cpi_lag <- lag(df$cpi, 1)
df <- df %>% na.omit()
return(df)
}
gemerate_Bayesian_Model <- function(df){
N <- nrow(df)
stan_data <- list(
N = N,
pi_t = df$cpi,
pi_lead1 = df$cpi_lead,
pi_lag1 = df$cpi_lag,
x_t = df$output_gap
)
fit <- stan(
file = paste0(file_path, "nkpc.stan"),
data = stan_data,
iter = 2000,
warmup = 500,
chains = 4,
seed = 123
)
stan_summary <- summary(fit, pars = c("beta", "kappa", "sigma"))$summary |>
as.data.frame()
return(stan_summary)
}
gather_Bayesian_Parameters <- function(){
models_collection <- c()
countries <- c("AT", "BE", "BG", "HR", "CY", "CZ", "DK", "EE", "FI", "FR",
"DE", "GR", "HU", "IE", "IT", "LV", "LT", "LU", "MT",
"NL", "PL", "PT", "RO", "SK", "SI", "ES")
for (country in countries) {
print(country)
df <- GMM_data_download(country)
df <- Calculate_Output_Gap(df)
df <- generate_Bayesian_GMM_Features(df)
model <- gemerate_Bayesian_Model(df)
model$country <- country
models_collection <- rbind(models_collection, model)
}
write.csv(models_collection, file = paste0(file_path, "Bayesian_GMM_Parameters.csv", row.names = TRUE))
}
if (sys.nframe() == 0) {
gather_Bayesian_Parameters()
}
# install.packages("rstan", dependencies = TRUE)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
file_path <- paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/")
source(paste0(file_path, "GMM_code.R"))
generate_Bayesian_GMM_Features <- function(df){
df$cpi_lead <- lead(df$cpi, 1)
df$cpi_lag <- lag(df$cpi, 1)
df <- df %>% na.omit()
return(df)
}
gemerate_Bayesian_Model <- function(df){
N <- nrow(df)
stan_data <- list(
N = N,
pi_t = df$cpi,
pi_lead1 = df$cpi_lead,
pi_lag1 = df$cpi_lag,
x_t = df$output_gap
)
fit <- stan(
file = paste0(file_path, "nkpc.stan"),
data = stan_data,
iter = 2000,
warmup = 500,
chains = 4,
seed = 123
)
stan_summary <- summary(fit, pars = c("beta", "kappa", "sigma"))$summary |>
as.data.frame()
return(stan_summary)
}
gather_Bayesian_Parameters <- function(){
models_collection <- c()
countries <- c("AT", "BE", "BG", "HR", "CY", "CZ", "DK", "EE", "FI", "FR",
"DE", "EL", "HU", "IE", "IT", "LV", "LT", "LU", "MT",
"NL", "PL", "PT", "RO", "SK", "SI", "ES")
for (country in countries) {
print(country)
df <- GMM_data_download(country)
df <- Calculate_Output_Gap(df)
df <- generate_Bayesian_GMM_Features(df)
model <- gemerate_Bayesian_Model(df)
model$country <- country
models_collection <- rbind(models_collection, model)
}
write.csv(models_collection, file = paste0(file_path, "Bayesian_GMM_Parameters.csv", row.names = TRUE))
}
if (sys.nframe() == 0) {
gather_Bayesian_Parameters()
}
