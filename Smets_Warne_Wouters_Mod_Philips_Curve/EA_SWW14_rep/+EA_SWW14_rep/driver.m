%
% Status : main Dynare file
%
% Warning : this file is generated automatically by Dynare
%           from model file (.mod)

tic0 = tic;
% Define global variables.
global M_ options_ oo_ estim_params_ bayestopt_ dataset_ dataset_info estimation_info
options_ = [];
M_.fname = 'EA_SWW14_rep';
M_.dynare_version = '6.3';
oo_.dynare_version = '6.3';
options_.dynare_version = '6.3';
%
% Some global variables initialization
%
global_initialization;
M_.exo_names = cell(10,1);
M_.exo_names_tex = cell(10,1);
M_.exo_names_long = cell(10,1);
M_.exo_names(1) = {'eta_b'};
M_.exo_names_tex(1) = {'{\eta_b}'};
M_.exo_names_long(1) = {'Risk premium shock'};
M_.exo_names(2) = {'eta_q'};
M_.exo_names_tex(2) = {'{\eta_q}'};
M_.exo_names_long(2) = {'Investment-specific technology shock'};
M_.exo_names(3) = {'eta_g'};
M_.exo_names_tex(3) = {'{\eta_g}'};
M_.exo_names_long(3) = {'Government spending shock'};
M_.exo_names(4) = {'eta_a'};
M_.exo_names_tex(4) = {'{\eta_a}'};
M_.exo_names_long(4) = {'Productivity shock'};
M_.exo_names(5) = {'eta_p'};
M_.exo_names_tex(5) = {'{\eta_p}'};
M_.exo_names_long(5) = {'Price markup shock'};
M_.exo_names(6) = {'eta_s'};
M_.exo_names_tex(6) = {'{\eta_s}'};
M_.exo_names_long(6) = {'Labor supply shock'};
M_.exo_names(7) = {'eta_w'};
M_.exo_names_tex(7) = {'{\eta_w}'};
M_.exo_names_long(7) = {'Wage markup shock'};
M_.exo_names(8) = {'eta_r'};
M_.exo_names_tex(8) = {'{\eta_r}'};
M_.exo_names_long(8) = {'Monetary policy shock'};
M_.exo_names(9) = {'eta_p_energy'};
M_.exo_names_tex(9) = {'{\eta_p^{energy}}'};
M_.exo_names_long(9) = {'Price shock - Energy'};
M_.exo_names(10) = {'eta_p_food'};
M_.exo_names_tex(10) = {'{\eta_p^{food}}'};
M_.exo_names_long(10) = {'Price shock - Food'};
M_.endo_names = cell(62,1);
M_.endo_names_tex = cell(62,1);
M_.endo_names_long = cell(62,1);
M_.endo_names(1) = {'c'};
M_.endo_names_tex(1) = {'{c}'};
M_.endo_names_long(1) = {'Consumption'};
M_.endo_names(2) = {'r'};
M_.endo_names_tex(2) = {'{r}'};
M_.endo_names_long(2) = {'Nominal interest rate'};
M_.endo_names(3) = {'pi'};
M_.endo_names_tex(3) = {'{\pi}'};
M_.endo_names_long(3) = {'Inflation rate'};
M_.endo_names(4) = {'i'};
M_.endo_names_tex(4) = {'{i}'};
M_.endo_names_long(4) = {'Investment'};
M_.endo_names(5) = {'q'};
M_.endo_names_tex(5) = {'{q}'};
M_.endo_names_long(5) = {'Value of capital stock'};
M_.endo_names(6) = {'rk'};
M_.endo_names_tex(6) = {'{r^{k}}'};
M_.endo_names_long(6) = {'Expected return on capital'};
M_.endo_names(7) = {'y'};
M_.endo_names_tex(7) = {'{y}'};
M_.endo_names_long(7) = {'Output'};
M_.endo_names(8) = {'v'};
M_.endo_names_tex(8) = {'{v}'};
M_.endo_names_long(8) = {'Capital utilization'};
M_.endo_names(9) = {'k'};
M_.endo_names_tex(9) = {'{k}'};
M_.endo_names_long(9) = {'Capital used in production'};
M_.endo_names(10) = {'n'};
M_.endo_names_tex(10) = {'{n}'};
M_.endo_names_long(10) = {'Hours worked'};
M_.endo_names(11) = {'mc'};
M_.endo_names_tex(11) = {'{mc}'};
M_.endo_names_long(11) = {'Marginal cost'};
M_.endo_names(12) = {'w'};
M_.endo_names_tex(12) = {'{w}'};
M_.endo_names_long(12) = {'Real wage'};
M_.endo_names(13) = {'z'};
M_.endo_names_tex(13) = {'{z}'};
M_.endo_names_long(13) = {'Smoothed trend of consumption'};
M_.endo_names(14) = {'u'};
M_.endo_names_tex(14) = {'{u}'};
M_.endo_names_long(14) = {'Unemployment rate'};
M_.endo_names(15) = {'e'};
M_.endo_names_tex(15) = {'{e}'};
M_.endo_names_long(15) = {'Employment'};
M_.endo_names(16) = {'un'};
M_.endo_names_tex(16) = {'{u^{n}}'};
M_.endo_names_long(16) = {'Natural rate of unemployment (flex wage)'};
M_.endo_names(17) = {'l'};
M_.endo_names_tex(17) = {'{l}'};
M_.endo_names_long(17) = {'Labor force'};
M_.endo_names(18) = {'kbar'};
M_.endo_names_tex(18) = {'{\bar{k}}'};
M_.endo_names_long(18) = {'Capital stock'};
M_.endo_names(19) = {'ygap'};
M_.endo_names_tex(19) = {'{y^{gap}}'};
M_.endo_names_long(19) = {'Output gap'};
M_.endo_names(20) = {'pi_core'};
M_.endo_names_tex(20) = {'{\pi_core}'};
M_.endo_names_long(20) = {'Inflation rate - core inflation'};
M_.endo_names(21) = {'pi_energy'};
M_.endo_names_tex(21) = {'{\pi_energy}'};
M_.endo_names_long(21) = {'Inflation rate - energy prices'};
M_.endo_names(22) = {'pi_food'};
M_.endo_names_tex(22) = {'{\pi_fodd}'};
M_.endo_names_long(22) = {'Inflation rate - food prices'};
M_.endo_names(23) = {'cf'};
M_.endo_names_tex(23) = {'{c^{f}}'};
M_.endo_names_long(23) = {'Consumption (flex prices)'};
M_.endo_names(24) = {'rf'};
M_.endo_names_tex(24) = {'{r^{f}}'};
M_.endo_names_long(24) = {'Nominal interest rate (flex prices)'};
M_.endo_names(25) = {'invf'};
M_.endo_names_tex(25) = {'{i^{f}}'};
M_.endo_names_long(25) = {'Investment (flex prices)'};
M_.endo_names(26) = {'qf'};
M_.endo_names_tex(26) = {'{q^{f}}'};
M_.endo_names_long(26) = {'Value of capital stock (flex prices)'};
M_.endo_names(27) = {'rkf'};
M_.endo_names_tex(27) = {'{r^{k,f}}'};
M_.endo_names_long(27) = {'Return on capital (flex prices)'};
M_.endo_names(28) = {'vf'};
M_.endo_names_tex(28) = {'{v^{f}}'};
M_.endo_names_long(28) = {'Capital utilization (flex prices)'};
M_.endo_names(29) = {'kf'};
M_.endo_names_tex(29) = {'{k^{f}}'};
M_.endo_names_long(29) = {'Capital used in production (flex prices)'};
M_.endo_names(30) = {'nf'};
M_.endo_names_tex(30) = {'{n^{f}}'};
M_.endo_names_long(30) = {'Hours worked (flex prices)'};
M_.endo_names(31) = {'wf'};
M_.endo_names_tex(31) = {'{w^{f}}'};
M_.endo_names_long(31) = {'Real wage (flex prices)'};
M_.endo_names(32) = {'zf'};
M_.endo_names_tex(32) = {'{z^{f}}'};
M_.endo_names_long(32) = {'Smoothed trend of consumption (flex prices)'};
M_.endo_names(33) = {'ef'};
M_.endo_names_tex(33) = {'{e^{f}}'};
M_.endo_names_long(33) = {'Employment (flex prices)'};
M_.endo_names(34) = {'kbarf'};
M_.endo_names_tex(34) = {'{\bar{k}^{f}}'};
M_.endo_names_long(34) = {'Capital stock (flex prices)'};
M_.endo_names(35) = {'yf'};
M_.endo_names_tex(35) = {'{y^{f}}'};
M_.endo_names_long(35) = {'Output (flex prices)'};
M_.endo_names(36) = {'epsilon_b'};
M_.endo_names_tex(36) = {'{\varepsilon_b}'};
M_.endo_names_long(36) = {'Risk premium shock'};
M_.endo_names(37) = {'epsilon_q'};
M_.endo_names_tex(37) = {'{\varepsilon_q}'};
M_.endo_names_long(37) = {'Investment-specific technology shock'};
M_.endo_names(38) = {'epsilon_g'};
M_.endo_names_tex(38) = {'{\varepsilon_g}'};
M_.endo_names_long(38) = {'Government spending shock'};
M_.endo_names(39) = {'epsilon_a'};
M_.endo_names_tex(39) = {'{\varepsilon_a}'};
M_.endo_names_long(39) = {'Productivity shock'};
M_.endo_names(40) = {'epsilon_p'};
M_.endo_names_tex(40) = {'{\varepsilon_p}'};
M_.endo_names_long(40) = {'Price markup shock'};
M_.endo_names(41) = {'epsilon_s'};
M_.endo_names_tex(41) = {'{\varepsilon_s}'};
M_.endo_names_long(41) = {'Labor supply shock'};
M_.endo_names(42) = {'epsilon_w'};
M_.endo_names_tex(42) = {'{\varepsilon_w}'};
M_.endo_names_long(42) = {'Wage markup shock'};
M_.endo_names(43) = {'epsilon_r'};
M_.endo_names_tex(43) = {'{\varepsilon_r}'};
M_.endo_names_long(43) = {'Monetary policy shock'};
M_.endo_names(44) = {'epsilon_p_energy'};
M_.endo_names_tex(44) = {'{\varepsilon_p^{energy}}'};
M_.endo_names_long(44) = {'Price shock - Energy'};
M_.endo_names(45) = {'epsilon_p_food'};
M_.endo_names_tex(45) = {'{\varepsilon_p^{food}'};
M_.endo_names_long(45) = {'Price shock - Food'};
M_.endo_names(46) = {'dy_obs'};
M_.endo_names_tex(46) = {'{\Delta y^{obs}}'};
M_.endo_names_long(46) = {'Output growth (observed)'};
M_.endo_names(47) = {'dc_obs'};
M_.endo_names_tex(47) = {'{\Delta c^{obs}}'};
M_.endo_names_long(47) = {'Consumption growth (observed)'};
M_.endo_names(48) = {'di_obs'};
M_.endo_names_tex(48) = {'{\Delta i^{obs}}'};
M_.endo_names_long(48) = {'Investment growth (observed)'};
M_.endo_names(49) = {'dw_obs'};
M_.endo_names_tex(49) = {'{\Delta w^{obs}}'};
M_.endo_names_long(49) = {'Real wage growth (observed)'};
M_.endo_names(50) = {'de_obs'};
M_.endo_names_tex(50) = {'{\Delta e^{obs}}'};
M_.endo_names_long(50) = {'Employment growth (observed)'};
M_.endo_names(51) = {'u_obs'};
M_.endo_names_tex(51) = {'{u^{obs}}'};
M_.endo_names_long(51) = {'Unemployment rate (observed)'};
M_.endo_names(52) = {'r_obs'};
M_.endo_names_tex(52) = {'{r^{obs}}'};
M_.endo_names_long(52) = {'Interest rate (observed)'};
M_.endo_names(53) = {'pi_obs'};
M_.endo_names_tex(53) = {'{\pi^{obs}}'};
M_.endo_names_long(53) = {'Inflation (observed)'};
M_.endo_names(54) = {'pi_core_obs'};
M_.endo_names_tex(54) = {'{\pi^{obs}_core}'};
M_.endo_names_long(54) = {'Core Inflation (observed)'};
M_.endo_names(55) = {'pi_energy_obs'};
M_.endo_names_tex(55) = {'{\pi^{obs}_energy}'};
M_.endo_names_long(55) = {'Energy Inflation (observed)'};
M_.endo_names(56) = {'pi_food_obs'};
M_.endo_names_tex(56) = {'{\pi^{obs}_food}'};
M_.endo_names_long(56) = {'Food Inflation (observed)'};
M_.endo_names(57) = {'r_year'};
M_.endo_names_tex(57) = {'{r^{ann}}'};
M_.endo_names_long(57) = {'Nominal interest rate (annualized)'};
M_.endo_names(58) = {'pi_year'};
M_.endo_names_tex(58) = {'{\pi^{ann}}'};
M_.endo_names_long(58) = {'Inflation rate (annualized)'};
M_.endo_names(59) = {'AUX_ENDO_LAG_2_1'};
M_.endo_names_tex(59) = {'AUX\_ENDO\_LAG\_2\_1'};
M_.endo_names_long(59) = {'AUX_ENDO_LAG_2_1'};
M_.endo_names(60) = {'AUX_ENDO_LAG_2_2'};
M_.endo_names_tex(60) = {'AUX\_ENDO\_LAG\_2\_2'};
M_.endo_names_long(60) = {'AUX_ENDO_LAG_2_2'};
M_.endo_names(61) = {'AUX_EXO_LAG_62_0'};
M_.endo_names_tex(61) = {'AUX\_EXO\_LAG\_62\_0'};
M_.endo_names_long(61) = {'AUX_EXO_LAG_62_0'};
M_.endo_names(62) = {'AUX_EXO_LAG_64_0'};
M_.endo_names_tex(62) = {'AUX\_EXO\_LAG\_64\_0'};
M_.endo_names_long(62) = {'AUX_EXO_LAG_64_0'};
M_.endo_partitions = struct();
M_.param_names = cell(63,1);
M_.param_names_tex = cell(63,1);
M_.param_names_long = cell(63,1);
M_.param_names(1) = {'c_h'};
M_.param_names_tex(1) = {'{h}'};
M_.param_names_long(1) = {'Habit parameter'};
M_.param_names(2) = {'c_tau'};
M_.param_names_tex(2) = {'{\tau}'};
M_.param_names_long(2) = {'Trend growth rate'};
M_.param_names(3) = {'c_beta'};
M_.param_names_tex(3) = {'{\beta}'};
M_.param_names_long(3) = {'Discount factor'};
M_.param_names(4) = {'c_phi'};
M_.param_names_tex(4) = {'{\phi}'};
M_.param_names_long(4) = {'Elasticity of the capital adjustment cost function'};
M_.param_names(5) = {'c_delta'};
M_.param_names_tex(5) = {'{\delta}'};
M_.param_names_long(5) = {'Depreciation of capital'};
M_.param_names(6) = {'c_psi_p'};
M_.param_names_tex(6) = {'{\psi_p}'};
M_.param_names_long(6) = {'Reflects fixed costs in production'};
M_.param_names(7) = {'c_alpha'};
M_.param_names_tex(7) = {'{\alpha}'};
M_.param_names_long(7) = {'Cobb-Douglas parameter'};
M_.param_names(8) = {'c_gamma_p'};
M_.param_names_tex(8) = {'{\gamma_p}'};
M_.param_names_long(8) = {'Price indexation'};
M_.param_names(9) = {'c_theta_p'};
M_.param_names_tex(9) = {'{\theta_p}'};
M_.param_names_long(9) = {'Probability of price change'};
M_.param_names(10) = {'c_eps_p'};
M_.param_names_tex(10) = {'{\varepsilon_p}'};
M_.param_names_long(10) = {'Curvature of the price aggregator function'};
M_.param_names(11) = {'c_gamma_w'};
M_.param_names_tex(11) = {'{\gamma_w}'};
M_.param_names_long(11) = {'Wage indexation'};
M_.param_names(12) = {'c_theta_w'};
M_.param_names_tex(12) = {'{\theta_w}'};
M_.param_names_long(12) = {'Probability of wage change'};
M_.param_names(13) = {'c_eps_w'};
M_.param_names_tex(13) = {'{\varepsilon_w}'};
M_.param_names_long(13) = {'Curvature of the wage aggregator function'};
M_.param_names(14) = {'c_omega'};
M_.param_names_tex(14) = {'{\omega}'};
M_.param_names_long(14) = {'Inverse elasticity of labor supply'};
M_.param_names(15) = {'c_v'};
M_.param_names_tex(15) = {'{v}'};
M_.param_names_long(15) = {'Captures short run wealth effect on labor supply'};
M_.param_names(16) = {'c_psi'};
M_.param_names_tex(16) = {'{\psi}'};
M_.param_names_long(16) = {'Elasticity of the capital utilization cost function'};
M_.param_names(17) = {'c_rho_intr'};
M_.param_names_tex(17) = {'{\rho_{i}}'};
M_.param_names_long(17) = {'Persistence of monetary policy rule'};
M_.param_names(18) = {'c_rpi'};
M_.param_names_tex(18) = {'{r_{\pi}}'};
M_.param_names_long(18) = {'Coefficient on inflation'};
M_.param_names(19) = {'c_ry'};
M_.param_names_tex(19) = {'{r_{y}}'};
M_.param_names_long(19) = {'Coefficient on output gap'};
M_.param_names(20) = {'c_rdy'};
M_.param_names_tex(20) = {'{r_{\Delta y}}'};
M_.param_names_long(20) = {'Coefficient on change in output gap'};
M_.param_names(21) = {'c_theta_e'};
M_.param_names_tex(21) = {'{\theta_e}'};
M_.param_names_long(21) = {'Fraction of firms able to adjust employment'};
M_.param_names(22) = {'c_rk'};
M_.param_names_tex(22) = {'{c_{rk}}'};
M_.param_names_long(22) = {'Steady state return on capital'};
M_.param_names(23) = {'c_cy'};
M_.param_names_tex(23) = {'{\frac{\bar{c}}{y}}'};
M_.param_names_long(23) = {'Steady state consumption-output ratio'};
M_.param_names(24) = {'c_iy'};
M_.param_names_tex(24) = {'{\frac{\bar{i}}{y}}'};
M_.param_names_long(24) = {'Steady state investment-output ratio'};
M_.param_names(25) = {'c_vy'};
M_.param_names_tex(25) = {'{\frac{\bar{v}}{y}}'};
M_.param_names_long(25) = {'Steady state capital utilization-output ratio'};
M_.param_names(26) = {'c_gy'};
M_.param_names_tex(26) = {'{\frac{\bar{g}}{y}}'};
M_.param_names_long(26) = {'Steady state government spending-output ratio'};
M_.param_names(27) = {'c_ky'};
M_.param_names_tex(27) = {'{\frac{\bar{k}}{y}}'};
M_.param_names_long(27) = {'Steady state capital-output ratio'};
M_.param_names(28) = {'c_tau_bar'};
M_.param_names_tex(28) = {'{\bar{\tau}}'};
M_.param_names_long(28) = {'Steady state average growth rate'};
M_.param_names(29) = {'c_pi'};
M_.param_names_tex(29) = {'{c_{\pi}}'};
M_.param_names_long(29) = {'Steady state inflation rate'};
M_.param_names(30) = {'c_pi_bar'};
M_.param_names_tex(30) = {'{\bar{\pi}}'};
M_.param_names_long(30) = {'Target inflation (steady state)'};
M_.param_names(31) = {'c_r_bar'};
M_.param_names_tex(31) = {'{\bar{r}}'};
M_.param_names_long(31) = {'Steady state nominal interest rate'};
M_.param_names(32) = {'c_u_bar'};
M_.param_names_tex(32) = {'{\bar{u}}'};
M_.param_names_long(32) = {'Steady state unemployment rate'};
M_.param_names(33) = {'c_e_bar'};
M_.param_names_tex(33) = {'{\bar{e}}'};
M_.param_names_long(33) = {'Steady state employment'};
M_.param_names(34) = {'c_beta_bar'};
M_.param_names_tex(34) = {'{\bar{\beta}}}'};
M_.param_names_long(34) = {'Steady state discount factor'};
M_.param_names(35) = {'c_psi_w'};
M_.param_names_tex(35) = {'{\psi^w}'};
M_.param_names_long(35) = {'Steady state labor market markup parameter'};
M_.param_names(36) = {'c_w_energy'};
M_.param_names_tex(36) = {'{w_{energy}}'};
M_.param_names_long(36) = {'Steady state weight - energy in CPI basket'};
M_.param_names(37) = {'c_w_food'};
M_.param_names_tex(37) = {'{w_{food}}'};
M_.param_names_long(37) = {'Steady state weight - food in CPI basket'};
M_.param_names(38) = {'c_lk'};
M_.param_names_tex(38) = {'c\_lk'};
M_.param_names_long(38) = {'c_lk'};
M_.param_names(39) = {'c_w'};
M_.param_names_tex(39) = {'c\_w'};
M_.param_names_long(39) = {'c_w'};
M_.param_names(40) = {'c1'};
M_.param_names_tex(40) = {'{c_1}'};
M_.param_names_long(40) = {'Consumption - parameter 1'};
M_.param_names(41) = {'c2'};
M_.param_names_tex(41) = {'{c_2}'};
M_.param_names_long(41) = {'Consumption - parameter 2'};
M_.param_names(42) = {'i1'};
M_.param_names_tex(42) = {'{i_1}'};
M_.param_names_long(42) = {'Investments - parameter 1'};
M_.param_names(43) = {'i2'};
M_.param_names_tex(43) = {'{i_2}'};
M_.param_names_long(43) = {'Investments - parameter 2'};
M_.param_names(44) = {'q1'};
M_.param_names_tex(44) = {'{q_1}'};
M_.param_names_long(44) = {'Capital value - parameter 1'};
M_.param_names(45) = {'pi1'};
M_.param_names_tex(45) = {'{\pi_1}'};
M_.param_names_long(45) = {'Inflation - parameter 1'};
M_.param_names(46) = {'pi2'};
M_.param_names_tex(46) = {'{\pi_2}'};
M_.param_names_long(46) = {'Inflation - parameter 2'};
M_.param_names(47) = {'w1'};
M_.param_names_tex(47) = {'{w_1}'};
M_.param_names_long(47) = {'Wage - parameter 1'};
M_.param_names(48) = {'k1'};
M_.param_names_tex(48) = {'{k_1}'};
M_.param_names_long(48) = {'Capital - parameter 1'};
M_.param_names(49) = {'k2'};
M_.param_names_tex(49) = {'{k_2}'};
M_.param_names_long(49) = {'Capital - parameter 2'};
M_.param_names(50) = {'e1'};
M_.param_names_tex(50) = {'{e_1}'};
M_.param_names_long(50) = {'Employment - parameter 1'};
M_.param_names(51) = {'c_rho_b'};
M_.param_names_tex(51) = {'{\rho_b}'};
M_.param_names_long(51) = {'Persistence of risk premium shock'};
M_.param_names(52) = {'c_rho_q'};
M_.param_names_tex(52) = {'{\rho_q}'};
M_.param_names_long(52) = {'Persistence of investment-specific shock'};
M_.param_names(53) = {'c_rho_g'};
M_.param_names_tex(53) = {'{\rho_g}'};
M_.param_names_long(53) = {'Persistence of government spending shock'};
M_.param_names(54) = {'c_rho_a'};
M_.param_names_tex(54) = {'{\rho_a}'};
M_.param_names_long(54) = {'Persistence of productivity shock'};
M_.param_names(55) = {'c_rho_ga'};
M_.param_names_tex(55) = {'{\rho_{ga}}'};
M_.param_names_long(55) = {'Persistence of growth of productivity'};
M_.param_names(56) = {'c_rho_p'};
M_.param_names_tex(56) = {'{\rho_p}'};
M_.param_names_long(56) = {'Persistence of price markup shock'};
M_.param_names(57) = {'c_mu_p'};
M_.param_names_tex(57) = {'{\mu_p}'};
M_.param_names_long(57) = {'Steady state price markup'};
M_.param_names(58) = {'c_rho_s'};
M_.param_names_tex(58) = {'{\rho_s}'};
M_.param_names_long(58) = {'Persistence of labor supply shock'};
M_.param_names(59) = {'c_rho_w'};
M_.param_names_tex(59) = {'{\rho_w}'};
M_.param_names_long(59) = {'Persistence of wage markup shock'};
M_.param_names(60) = {'c_mu_w'};
M_.param_names_tex(60) = {'{\mu_w}'};
M_.param_names_long(60) = {'Steady state wage markup'};
M_.param_names(61) = {'c_rho_r'};
M_.param_names_tex(61) = {'{\rho_r}'};
M_.param_names_long(61) = {'Persistence of monetary policy shock'};
M_.param_names(62) = {'c_rho_p_energy'};
M_.param_names_tex(62) = {'{\rho_p^{energy}}'};
M_.param_names_long(62) = {'Persistence of price energy shock'};
M_.param_names(63) = {'c_rho_p_food'};
M_.param_names_tex(63) = {'{\rho_p^{food}}'};
M_.param_names_long(63) = {'Persistence of price food shock'};
M_.param_partitions = struct();
M_.exo_det_nbr = 0;
M_.exo_nbr = 10;
M_.endo_nbr = 62;
M_.param_nbr = 63;
M_.orig_endo_nbr = 58;
M_.aux_vars(1).endo_index = 59;
M_.aux_vars(1).type = 1;
M_.aux_vars(1).orig_index = 3;
M_.aux_vars(1).orig_lead_lag = -1;
M_.aux_vars(1).orig_expr = 'pi(-1)';
M_.aux_vars(2).endo_index = 60;
M_.aux_vars(2).type = 1;
M_.aux_vars(2).orig_index = 3;
M_.aux_vars(2).orig_lead_lag = -2;
M_.aux_vars(2).orig_expr = 'AUX_ENDO_LAG_2_1(-1)';
M_.aux_vars(3).endo_index = 61;
M_.aux_vars(3).type = 3;
M_.aux_vars(3).orig_index = 5;
M_.aux_vars(3).orig_lead_lag = 0;
M_.aux_vars(3).orig_expr = 'eta_p';
M_.aux_vars(4).endo_index = 62;
M_.aux_vars(4).type = 3;
M_.aux_vars(4).orig_index = 7;
M_.aux_vars(4).orig_lead_lag = 0;
M_.aux_vars(4).orig_expr = 'eta_w';
options_.varobs = cell(10, 1);
options_.varobs(1)  = {'dy_obs'};
options_.varobs(2)  = {'dc_obs'};
options_.varobs(3)  = {'di_obs'};
options_.varobs(4)  = {'pi_core_obs'};
options_.varobs(5)  = {'pi_energy_obs'};
options_.varobs(6)  = {'pi_food_obs'};
options_.varobs(7)  = {'dw_obs'};
options_.varobs(8)  = {'de_obs'};
options_.varobs(9)  = {'u_obs'};
options_.varobs(10)  = {'r_obs'};
options_.varobs_id = [ 46 47 48 54 55 56 49 50 51 52  ];
M_.Sigma_e = zeros(10, 10);
M_.Correlation_matrix = eye(10, 10);
M_.H = 0;
M_.Correlation_matrix_ME = 1;
M_.sigma_e_is_diagonal = true;
M_.det_shocks = [];
M_.surprise_shocks = [];
M_.learnt_shocks = [];
M_.learnt_endval = [];
M_.heteroskedastic_shocks.Qvalue_orig = [];
M_.heteroskedastic_shocks.Qscale_orig = [];
M_.matched_irfs = {};
M_.matched_irfs_weights = {};
options_.linear = true;
options_.block = false;
options_.bytecode = false;
options_.use_dll = false;
options_.ramsey_policy = false;
options_.discretionary_policy = false;
M_.nonzero_hessian_eqs = [];
M_.hessian_eq_zero = isempty(M_.nonzero_hessian_eqs);
M_.eq_nbr = 62;
M_.ramsey_orig_eq_nbr = 0;
M_.ramsey_orig_endo_nbr = 0;
M_.set_auxiliary_variables = exist(['./+' M_.fname '/set_auxiliary_variables.m'], 'file') == 2;
M_.epilogue_names = {};
M_.epilogue_var_list_ = {};
M_.orig_maximum_endo_lag = 3;
M_.orig_maximum_endo_lead = 1;
M_.orig_maximum_exo_lag = 1;
M_.orig_maximum_exo_lead = 0;
M_.orig_maximum_exo_det_lag = 0;
M_.orig_maximum_exo_det_lead = 0;
M_.orig_maximum_lag = 3;
M_.orig_maximum_lead = 1;
M_.orig_maximum_lag_with_diffs_expanded = 3;
M_.lead_lag_incidence = [
 1 33 95;
 2 34 0;
 3 35 96;
 4 36 97;
 0 37 98;
 0 38 99;
 5 39 0;
 0 40 0;
 0 41 0;
 0 42 0;
 0 43 0;
 6 44 100;
 7 45 0;
 0 46 0;
 8 47 101;
 0 48 0;
 0 49 0;
 9 50 0;
 10 51 0;
 11 52 102;
 12 53 103;
 13 54 104;
 14 55 105;
 0 56 0;
 15 57 106;
 0 58 107;
 0 59 108;
 0 60 0;
 0 61 0;
 0 62 0;
 0 63 0;
 16 64 0;
 17 65 109;
 18 66 0;
 0 67 0;
 19 68 0;
 20 69 0;
 21 70 0;
 22 71 0;
 23 72 0;
 24 73 0;
 25 74 0;
 26 75 0;
 27 76 0;
 28 77 0;
 0 78 0;
 0 79 0;
 0 80 0;
 0 81 0;
 0 82 0;
 0 83 0;
 0 84 0;
 0 85 0;
 0 86 0;
 0 87 0;
 0 88 0;
 0 89 0;
 0 90 0;
 29 91 0;
 30 92 0;
 31 93 0;
 32 94 0;]';
M_.nstatic = 26;
M_.nfwrd   = 4;
M_.npred   = 21;
M_.nboth   = 11;
M_.nsfwrd   = 15;
M_.nspred   = 32;
M_.ndynamic   = 36;
M_.dynamic_tmp_nbr = [2; 0; 0; 0; ];
M_.equations_tags = {
  1 , 'name' , 'Eq (1).: Consumption Euler Equation' ;
  2 , 'name' , 'Eq (2).: Investment Euler Equation' ;
  3 , 'name' , 'Eq (3).: Value of Capital Stock' ;
  4 , 'name' , 'Eq (4).: Aggregate Resource Constraint' ;
  5 , 'name' , 'Eq (5).: Cobb-Douglas Production Function' ;
  6 , 'name' , 'Eq (6).: Calvo Pricing - aggregation' ;
  7 , 'name' , 'Eq (6a).: Calvo Pricing - Core inflation' ;
  8 , 'name' , 'Eq (6b).: Calvo Pricing - Food inflation' ;
  9 , 'name' , 'Eq (6c).: Calvo Pricing - Energy inflation' ;
  10 , 'name' , 'Eq (7).: Marginal Cost' ;
  11 , 'name' , 'Eq (8).: Calvo Wage Setting' ;
  12 , 'name' , 'Eq (9).: Average Wage Markup and Unemployment' ;
  13 , 'name' , 'Eq (10).: Natural Unemployment' ;
  14 , 'name' , 'Eq (11).: Labor Force' ;
  15 , 'name' , 'Eq (12).: Smoothed Trend of Consumption' ;
  16 , 'name' , 'Eq (13).: Capital Stock' ;
  17 , 'name' , 'Eq (14).: Capital Services Production' ;
  18 , 'name' , 'Eq (15).: Optimal Capital Utilization' ;
  19 , 'name' , 'Eq (16).: Optimal Capital-Labor Condition' ;
  20 , 'name' , 'Eq (17).: Monetary Policy Rule' ;
  21 , 'name' , 'Eq (18).: Employment/Technology' ;
  22 , 'name' , 'Eq (1b).: Consumption Euler Equation - Flexible prices' ;
  23 , 'name' , 'Eq (2b).: Investment Euler Equation' ;
  24 , 'name' , 'Eq (3b).: Value of Capital Stock' ;
  25 , 'name' , 'Eq (4b).: Aggregate Resource Constraint' ;
  26 , 'name' , 'Eq (5b).: Cobb-Douglas Production Function' ;
  27 , 'name' , 'Eq (7b).: Marginal Cost' ;
  28 , 'name' , 'Eq (8b).: Wage Setting' ;
  29 , 'name' , 'Eq (12b).: Smoothed Trend of Consumption' ;
  30 , 'name' , 'Eq (13b).: Capital Stock' ;
  31 , 'name' , 'Eq (14b).: Capital Services Production' ;
  32 , 'name' , 'Eq (15b).: Optimal Capital Utilization' ;
  33 , 'name' , 'Eq (16b).: Optimal Capital-Labor Condition' ;
  34 , 'name' , 'Eq (18b).: Employment/Technology' ;
  35 , 'name' , 'ygap' ;
  36 , 'name' , 'epsilon_a' ;
  37 , 'name' , 'epsilon_b' ;
  38 , 'name' , 'epsilon_g' ;
  39 , 'name' , 'epsilon_p' ;
  40 , 'name' , 'epsilon_q' ;
  41 , 'name' , 'epsilon_r' ;
  42 , 'name' , 'epsilon_s' ;
  43 , 'name' , 'epsilon_w' ;
  44 , 'name' , 'epsilon_p_energy' ;
  45 , 'name' , 'epsilon_p_food' ;
  46 , 'name' , 'dy_obs' ;
  47 , 'name' , 'dc_obs' ;
  48 , 'name' , 'di_obs' ;
  49 , 'name' , 'pi_core_obs' ;
  50 , 'name' , 'pi_energy_obs' ;
  51 , 'name' , 'pi_food_obs' ;
  52 , 'name' , 'pi_obs' ;
  53 , 'name' , '53' ;
  54 , 'name' , 'de_obs' ;
  55 , 'name' , 'u_obs' ;
  56 , 'name' , 'r_obs' ;
  57 , 'name' , 'r_year' ;
  58 , 'name' , 'pi_year' ;
};
M_.mapping.c.eqidx = [1 4 15 47 ];
M_.mapping.r.eqidx = [1 3 20 56 57 ];
M_.mapping.pi.eqidx = [1 3 6 11 20 53 58 ];
M_.mapping.i.eqidx = [2 4 16 48 ];
M_.mapping.q.eqidx = [2 3 ];
M_.mapping.rk.eqidx = [3 10 18 19 ];
M_.mapping.y.eqidx = [4 5 35 46 ];
M_.mapping.v.eqidx = [4 17 18 ];
M_.mapping.k.eqidx = [5 17 19 ];
M_.mapping.n.eqidx = [5 19 21 ];
M_.mapping.mc.eqidx = [7 8 9 10 ];
M_.mapping.w.eqidx = [10 11 12 19 53 ];
M_.mapping.z.eqidx = [12 15 ];
M_.mapping.u.eqidx = [11 12 14 55 ];
M_.mapping.e.eqidx = [12 14 21 54 ];
M_.mapping.un.eqidx = [13 ];
M_.mapping.l.eqidx = [14 ];
M_.mapping.kbar.eqidx = [16 17 ];
M_.mapping.ygap.eqidx = [20 35 ];
M_.mapping.pi_core.eqidx = [6 7 49 ];
M_.mapping.pi_energy.eqidx = [6 9 50 ];
M_.mapping.pi_food.eqidx = [6 8 51 ];
M_.mapping.cf.eqidx = [22 25 29 ];
M_.mapping.rf.eqidx = [22 24 ];
M_.mapping.invf.eqidx = [23 25 30 ];
M_.mapping.qf.eqidx = [23 24 ];
M_.mapping.rkf.eqidx = [24 27 32 33 ];
M_.mapping.vf.eqidx = [25 31 32 ];
M_.mapping.kf.eqidx = [26 31 33 ];
M_.mapping.nf.eqidx = [26 28 33 34 ];
M_.mapping.wf.eqidx = [27 28 33 ];
M_.mapping.zf.eqidx = [28 29 ];
M_.mapping.ef.eqidx = [34 ];
M_.mapping.kbarf.eqidx = [30 31 ];
M_.mapping.yf.eqidx = [25 26 35 ];
M_.mapping.epsilon_b.eqidx = [1 3 22 24 37 ];
M_.mapping.epsilon_q.eqidx = [2 16 23 30 40 ];
M_.mapping.epsilon_g.eqidx = [4 25 38 ];
M_.mapping.epsilon_a.eqidx = [5 10 26 27 36 ];
M_.mapping.epsilon_p.eqidx = [7 8 9 39 ];
M_.mapping.epsilon_s.eqidx = [12 28 42 ];
M_.mapping.epsilon_w.eqidx = [11 13 43 ];
M_.mapping.epsilon_r.eqidx = [20 41 ];
M_.mapping.epsilon_p_energy.eqidx = [9 44 ];
M_.mapping.epsilon_p_food.eqidx = [8 45 ];
M_.mapping.dy_obs.eqidx = [46 ];
M_.mapping.dc_obs.eqidx = [47 ];
M_.mapping.di_obs.eqidx = [48 ];
M_.mapping.dw_obs.eqidx = [53 ];
M_.mapping.de_obs.eqidx = [54 ];
M_.mapping.u_obs.eqidx = [55 ];
M_.mapping.r_obs.eqidx = [56 ];
M_.mapping.pi_obs.eqidx = [52 53 ];
M_.mapping.pi_core_obs.eqidx = [49 52 ];
M_.mapping.pi_energy_obs.eqidx = [50 52 ];
M_.mapping.pi_food_obs.eqidx = [51 52 ];
M_.mapping.r_year.eqidx = [57 ];
M_.mapping.pi_year.eqidx = [58 ];
M_.mapping.eta_b.eqidx = [37 ];
M_.mapping.eta_q.eqidx = [40 ];
M_.mapping.eta_g.eqidx = [38 ];
M_.mapping.eta_a.eqidx = [36 38 ];
M_.mapping.eta_p.eqidx = [39 44 45 ];
M_.mapping.eta_s.eqidx = [42 ];
M_.mapping.eta_w.eqidx = [43 ];
M_.mapping.eta_r.eqidx = [41 ];
M_.mapping.eta_p_energy.eqidx = [44 ];
M_.mapping.eta_p_food.eqidx = [45 ];
M_.static_and_dynamic_models_differ = false;
M_.has_external_function = false;
M_.block_structure.time_recursive = false;
M_.block_structure.block(1).Simulation_Type = 1;
M_.block_structure.block(1).endo_nbr = 12;
M_.block_structure.block(1).mfs = 12;
M_.block_structure.block(1).equation = [ 36 37 38 40 41 42 61 62 39 43 44 45];
M_.block_structure.block(1).variable = [ 39 36 38 37 43 41 61 62 40 42 44 45];
M_.block_structure.block(1).is_linear = true;
M_.block_structure.block(1).NNZDerivatives = 26;
M_.block_structure.block(1).bytecode_jacob_cols_to_sparse = [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ];
M_.block_structure.block(2).Simulation_Type = 3;
M_.block_structure.block(2).endo_nbr = 1;
M_.block_structure.block(2).mfs = 1;
M_.block_structure.block(2).equation = [ 13];
M_.block_structure.block(2).variable = [ 16];
M_.block_structure.block(2).is_linear = true;
M_.block_structure.block(2).NNZDerivatives = 1;
M_.block_structure.block(2).bytecode_jacob_cols_to_sparse = [1 ];
M_.block_structure.block(3).Simulation_Type = 8;
M_.block_structure.block(3).endo_nbr = 12;
M_.block_structure.block(3).mfs = 9;
M_.block_structure.block(3).equation = [ 26 32 28 22 31 33 29 30 23 25 24 27];
M_.block_structure.block(3).variable = [ 35 28 31 24 29 30 32 34 25 23 26 27];
M_.block_structure.block(3).is_linear = true;
M_.block_structure.block(3).NNZDerivatives = 39;
M_.block_structure.block(3).bytecode_jacob_cols_to_sparse = [4 5 6 7 0 0 0 10 11 12 13 14 15 16 17 18 24 25 26 27 ];
M_.block_structure.block(4).Simulation_Type = 8;
M_.block_structure.block(4).endo_nbr = 20;
M_.block_structure.block(4).mfs = 18;
M_.block_structure.block(4).equation = [ 4 10 17 19 5 12 15 16 20 35 8 21 7 1 2 9 6 11 18 3];
M_.block_structure.block(4).variable = [ 7 11 8 10 9 14 13 18 2 19 22 15 20 1 4 21 3 12 6 5];
M_.block_structure.block(4).is_linear = true;
M_.block_structure.block(4).NNZDerivatives = 83;
M_.block_structure.block(4).bytecode_jacob_cols_to_sparse = [5 6 7 8 9 10 11 12 13 14 15 16 0 0 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 45 46 47 48 49 50 51 52 53 54 ];
M_.block_structure.block(5).Simulation_Type = 1;
M_.block_structure.block(5).endo_nbr = 11;
M_.block_structure.block(5).mfs = 11;
M_.block_structure.block(5).equation = [ 50 51 57 49 56 59 60 52 58 55 54];
M_.block_structure.block(5).variable = [ 55 56 57 54 52 59 60 53 58 51 50];
M_.block_structure.block(5).is_linear = true;
M_.block_structure.block(5).NNZDerivatives = 17;
M_.block_structure.block(5).bytecode_jacob_cols_to_sparse = [6 7 12 13 14 15 16 17 18 19 20 21 22 ];
M_.block_structure.block(6).Simulation_Type = 3;
M_.block_structure.block(6).endo_nbr = 1;
M_.block_structure.block(6).mfs = 1;
M_.block_structure.block(6).equation = [ 53];
M_.block_structure.block(6).variable = [ 49];
M_.block_structure.block(6).is_linear = true;
M_.block_structure.block(6).NNZDerivatives = 1;
M_.block_structure.block(6).bytecode_jacob_cols_to_sparse = [1 ];
M_.block_structure.block(7).Simulation_Type = 1;
M_.block_structure.block(7).endo_nbr = 3;
M_.block_structure.block(7).mfs = 3;
M_.block_structure.block(7).equation = [ 48 47 46];
M_.block_structure.block(7).variable = [ 48 47 46];
M_.block_structure.block(7).is_linear = true;
M_.block_structure.block(7).NNZDerivatives = 3;
M_.block_structure.block(7).bytecode_jacob_cols_to_sparse = [4 5 6 ];
M_.block_structure.block(8).Simulation_Type = 5;
M_.block_structure.block(8).endo_nbr = 1;
M_.block_structure.block(8).mfs = 1;
M_.block_structure.block(8).equation = [ 34];
M_.block_structure.block(8).variable = [ 33];
M_.block_structure.block(8).is_linear = true;
M_.block_structure.block(8).NNZDerivatives = 3;
M_.block_structure.block(8).bytecode_jacob_cols_to_sparse = [1 2 3 ];
M_.block_structure.block(9).Simulation_Type = 1;
M_.block_structure.block(9).endo_nbr = 1;
M_.block_structure.block(9).mfs = 1;
M_.block_structure.block(9).equation = [ 14];
M_.block_structure.block(9).variable = [ 17];
M_.block_structure.block(9).is_linear = true;
M_.block_structure.block(9).NNZDerivatives = 1;
M_.block_structure.block(9).bytecode_jacob_cols_to_sparse = [2 ];
M_.block_structure.block(1).g1_sparse_rowval = int32([]);
M_.block_structure.block(1).g1_sparse_colval = int32([]);
M_.block_structure.block(1).g1_sparse_colptr = int32([]);
M_.block_structure.block(2).g1_sparse_rowval = int32([1 ]);
M_.block_structure.block(2).g1_sparse_colval = int32([1 ]);
M_.block_structure.block(2).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure.block(3).g1_sparse_rowval = int32([4 2 5 6 1 4 1 8 2 3 7 3 7 9 3 4 9 5 5 6 7 1 4 7 6 8 2 3 7 9 6 1 8 8 ]);
M_.block_structure.block(3).g1_sparse_colval = int32([4 5 5 6 7 7 10 10 11 11 11 12 12 12 13 13 13 14 15 15 15 16 16 16 17 17 18 18 18 18 24 25 26 27 ]);
M_.block_structure.block(3).g1_sparse_colptr = int32([1 1 1 1 2 4 5 7 7 7 9 12 15 18 19 22 25 27 31 31 31 31 31 31 32 33 34 35 ]);
M_.block_structure.block(4).g1_sparse_rowval = int32([5 1 6 7 7 9 10 11 5 12 13 14 16 16 1 3 8 17 2 3 10 1 2 3 4 16 4 5 6 7 12 18 7 8 9 15 4 10 11 15 3 5 8 12 3 6 8 13 14 15 7 15 16 2 4 9 11 14 16 2 9 11 14 17 13 18 9 10 11 12 13 14 12 16 18 16 18 18 ]);
M_.block_structure.block(4).g1_sparse_colval = int32([5 6 6 7 8 9 10 11 12 12 13 14 15 16 19 19 19 19 20 20 20 21 21 21 22 22 23 23 24 25 25 25 26 26 27 27 28 28 29 29 30 30 30 30 31 31 31 31 32 32 33 33 33 34 34 34 34 34 34 35 35 35 35 35 36 36 45 46 47 48 49 50 51 51 51 52 53 54 ]);
M_.block_structure.block(4).g1_sparse_colptr = int32([1 1 1 1 1 2 4 5 6 7 8 9 11 12 13 14 15 15 15 19 22 25 27 29 30 33 35 37 39 41 45 49 51 54 60 65 67 67 67 67 67 67 67 67 67 68 69 70 71 72 73 76 77 78 79 ]);
M_.block_structure.block(5).g1_sparse_rowval = int32([]);
M_.block_structure.block(5).g1_sparse_colval = int32([]);
M_.block_structure.block(5).g1_sparse_colptr = int32([]);
M_.block_structure.block(6).g1_sparse_rowval = int32([1 ]);
M_.block_structure.block(6).g1_sparse_colval = int32([1 ]);
M_.block_structure.block(6).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure.block(7).g1_sparse_rowval = int32([]);
M_.block_structure.block(7).g1_sparse_colval = int32([]);
M_.block_structure.block(7).g1_sparse_colptr = int32([]);
M_.block_structure.block(8).g1_sparse_rowval = int32([1 1 1 ]);
M_.block_structure.block(8).g1_sparse_colval = int32([1 2 3 ]);
M_.block_structure.block(8).g1_sparse_colptr = int32([1 2 3 4 ]);
M_.block_structure.block(9).g1_sparse_rowval = int32([]);
M_.block_structure.block(9).g1_sparse_colval = int32([]);
M_.block_structure.block(9).g1_sparse_colptr = int32([]);
M_.block_structure.variable_reordered = [ 39 36 38 37 43 41 61 62 40 42 44 45 16 35 28 31 24 29 30 32 34 25 23 26 27 7 11 8 10 9 14 13 18 2 19 22 15 20 1 4 21 3 12 6 5 55 56 57 54 52 59 60 53 58 51 50 49 48 47 46 33 17];
M_.block_structure.equation_reordered = [ 36 37 38 40 41 42 61 62 39 43 44 45 13 26 32 28 22 31 33 29 30 23 25 24 27 4 10 17 19 5 12 15 16 20 35 8 21 7 1 2 9 6 11 18 3 50 51 57 49 56 59 60 52 58 55 54 53 48 47 46 34 14];
M_.block_structure.incidence(1).lead_lag = -1;
M_.block_structure.incidence(1).sparse_IM = [
 1 1;
 2 4;
 7 20;
 8 22;
 9 21;
 11 3;
 11 12;
 15 1;
 15 13;
 16 18;
 17 18;
 20 2;
 20 19;
 21 15;
 22 23;
 23 25;
 29 23;
 29 32;
 30 34;
 31 34;
 34 33;
 36 39;
 37 36;
 38 38;
 39 40;
 39 61;
 40 37;
 41 43;
 42 41;
 43 42;
 43 62;
 44 44;
 44 61;
 45 45;
 45 61;
 46 7;
 47 1;
 48 4;
 53 3;
 53 12;
 54 15;
 58 3;
 58 59;
 58 60;
 59 3;
 60 59;
];
M_.block_structure.incidence(2).lead_lag = 0;
M_.block_structure.incidence(2).sparse_IM = [
 1 1;
 1 2;
 1 36;
 2 4;
 2 5;
 2 37;
 3 2;
 3 5;
 3 36;
 4 1;
 4 4;
 4 7;
 4 8;
 4 38;
 5 7;
 5 9;
 5 10;
 5 39;
 6 3;
 6 20;
 6 21;
 6 22;
 7 11;
 7 20;
 7 40;
 8 11;
 8 22;
 8 40;
 8 45;
 9 11;
 9 21;
 9 40;
 9 44;
 10 6;
 10 11;
 10 12;
 10 39;
 11 3;
 11 12;
 11 14;
 11 42;
 12 12;
 12 13;
 12 14;
 12 15;
 12 41;
 13 16;
 13 42;
 14 14;
 14 15;
 14 17;
 15 1;
 15 13;
 16 4;
 16 18;
 16 37;
 17 8;
 17 9;
 18 6;
 18 8;
 19 6;
 19 9;
 19 10;
 19 12;
 20 2;
 20 3;
 20 19;
 20 43;
 21 10;
 21 15;
 22 23;
 22 24;
 22 36;
 23 25;
 23 26;
 23 37;
 24 24;
 24 26;
 24 36;
 25 23;
 25 25;
 25 28;
 25 35;
 25 38;
 26 29;
 26 30;
 26 35;
 26 39;
 27 27;
 27 31;
 27 39;
 28 30;
 28 31;
 28 32;
 28 41;
 29 23;
 29 32;
 30 25;
 30 34;
 30 37;
 31 28;
 31 29;
 32 27;
 32 28;
 33 27;
 33 29;
 33 30;
 33 31;
 34 30;
 34 33;
 35 7;
 35 19;
 35 35;
 36 39;
 37 36;
 38 38;
 39 40;
 40 37;
 41 43;
 42 41;
 43 42;
 44 44;
 45 45;
 46 7;
 46 46;
 47 1;
 47 47;
 48 4;
 48 48;
 49 20;
 49 54;
 50 21;
 50 55;
 51 22;
 51 56;
 52 53;
 52 54;
 52 55;
 52 56;
 53 3;
 53 12;
 53 49;
 53 53;
 54 15;
 54 50;
 55 14;
 55 51;
 56 2;
 56 52;
 57 2;
 57 57;
 58 3;
 58 58;
 59 59;
 60 60;
 61 61;
 62 62;
];
M_.block_structure.incidence(3).lead_lag = 1;
M_.block_structure.incidence(3).sparse_IM = [
 1 1;
 1 3;
 2 4;
 3 3;
 3 5;
 3 6;
 7 20;
 8 22;
 9 21;
 11 3;
 11 12;
 21 15;
 22 23;
 23 25;
 24 26;
 24 27;
 34 33;
];
M_.block_structure.dyn_tmp_nbr = 0;
M_.state_var = [39 36 38 37 43 41 61 62 40 42 44 45 32 34 25 23 7 13 18 2 19 22 15 20 1 4 21 3 12 59 60 33 ];
M_.maximum_lag = 1;
M_.maximum_lead = 1;
M_.maximum_endo_lag = 1;
M_.maximum_endo_lead = 1;
oo_.steady_state = zeros(62, 1);
M_.maximum_exo_lag = 0;
M_.maximum_exo_lead = 0;
oo_.exo_steady_state = zeros(10, 1);
M_.params = NaN(63, 1);
M_.endo_trends = struct('deflator', cell(62, 1), 'log_deflator', cell(62, 1), 'growth_factor', cell(62, 1), 'log_growth_factor', cell(62, 1));
M_.NNZDerivatives = [235; 0; -1; ];
M_.dynamic_g1_sparse_rowval = int32([1 15 47 20 11 53 58 59 2 48 46 11 53 15 21 54 16 17 20 7 9 8 22 29 23 29 34 30 31 37 40 38 36 39 42 43 41 44 45 58 60 58 39 44 45 43 1 4 15 47 1 3 20 56 57 6 11 20 53 58 2 4 16 48 2 3 10 18 19 4 5 35 46 4 17 18 5 17 19 5 19 21 7 8 9 10 10 11 12 19 53 12 15 11 12 14 55 12 14 21 54 13 14 16 20 35 6 7 49 6 9 50 6 8 51 22 25 29 22 24 23 25 30 23 24 27 32 33 25 31 32 26 31 33 26 28 33 34 27 28 33 28 29 34 30 25 26 35 1 3 22 24 37 2 16 23 30 40 4 25 38 5 10 26 27 36 7 8 9 39 12 28 42 11 13 43 20 41 9 44 8 45 46 47 48 53 54 55 56 52 53 49 52 50 52 51 52 57 58 59 60 61 62 1 1 3 11 2 3 3 11 21 7 9 8 22 23 24 24 34 37 40 38 36 38 39 44 45 61 42 43 62 41 44 45 ]);
M_.dynamic_g1_sparse_colval = int32([1 1 1 2 3 3 3 3 4 4 7 12 12 13 15 15 18 18 19 20 21 22 23 23 25 32 33 34 34 36 37 38 39 40 41 42 43 44 45 59 59 60 61 61 61 62 63 63 63 63 64 64 64 64 64 65 65 65 65 65 66 66 66 66 67 67 68 68 68 69 69 69 69 70 70 70 71 71 71 72 72 72 73 73 73 73 74 74 74 74 74 75 75 76 76 76 76 77 77 77 77 78 79 80 81 81 82 82 82 83 83 83 84 84 84 85 85 85 86 86 87 87 87 88 88 89 89 89 90 90 90 91 91 91 92 92 92 92 93 93 93 94 94 95 96 97 97 97 98 98 98 98 98 99 99 99 99 99 100 100 100 101 101 101 101 101 102 102 102 102 103 103 103 104 104 104 105 105 106 106 107 107 108 109 110 111 112 113 114 115 115 116 116 117 117 118 118 119 120 121 122 123 124 125 127 127 127 128 129 130 136 139 144 145 146 147 149 150 151 157 187 188 189 190 190 191 191 191 191 192 193 193 194 195 196 ]);
M_.dynamic_g1_sparse_colptr = int32([1 4 5 9 11 11 11 12 12 12 12 12 14 15 15 17 17 17 19 20 21 22 23 25 25 26 26 26 26 26 26 26 27 28 30 30 31 32 33 34 35 36 37 38 39 40 40 40 40 40 40 40 40 40 40 40 40 40 40 42 43 46 47 51 56 61 65 67 70 74 77 80 83 87 92 94 98 102 103 104 105 107 110 113 116 119 121 124 126 129 132 135 139 142 144 145 146 149 154 159 162 167 171 174 177 179 181 183 184 185 186 187 188 189 190 192 194 196 198 199 200 201 202 203 204 205 205 208 209 210 211 211 211 211 211 211 212 212 212 213 213 213 213 213 214 215 216 217 217 218 219 220 220 220 220 220 220 221 221 221 221 221 221 221 221 221 221 221 221 221 221 221 221 221 221 221 221 221 221 221 221 221 221 221 221 221 221 222 223 224 226 230 231 233 234 235 236 ]);
M_.dynamic_g2_sparse_indices = int32([]);
M_.lhs = {
'c'; 
'i'; 
'q'; 
'y'; 
'y'; 
'pi'; 
'pi_core-c_gamma_p*pi_core(-1)'; 
'pi_food-c_gamma_p*pi_food(-1)'; 
'pi_energy-c_gamma_p*pi_energy(-1)'; 
'mc'; 
'pi+w-w(-1)'; 
'c_omega*u'; 
'c_omega*un'; 
'l'; 
'z'; 
'kbar'; 
'k'; 
'v'; 
'k'; 
'r'; 
'e-e(-1)'; 
'cf'; 
'invf'; 
'qf'; 
'yf'; 
'yf'; 
'0'; 
'wf'; 
'zf'; 
'kbarf'; 
'kf'; 
'vf'; 
'kf'; 
'ef-ef(-1)'; 
'ygap'; 
'epsilon_a'; 
'epsilon_b'; 
'epsilon_g'; 
'epsilon_p'; 
'epsilon_q'; 
'epsilon_r'; 
'epsilon_s'; 
'epsilon_w'; 
'epsilon_p_energy'; 
'epsilon_p_food'; 
'dy_obs'; 
'dc_obs'; 
'di_obs'; 
'pi_core_obs'; 
'pi_energy_obs'; 
'pi_food_obs'; 
'pi_obs'; 
'dw_obs-pi_obs'; 
'de_obs'; 
'u_obs'; 
'r_obs'; 
'r_year'; 
'pi_year'; 
'AUX_ENDO_LAG_2_1'; 
'AUX_ENDO_LAG_2_2'; 
'AUX_EXO_LAG_62_0'; 
'AUX_EXO_LAG_64_0'; 
};
M_.static_tmp_nbr = [1; 0; 0; 0; ];
M_.block_structure_stat.block(1).Simulation_Type = 3;
M_.block_structure_stat.block(1).endo_nbr = 1;
M_.block_structure_stat.block(1).mfs = 1;
M_.block_structure_stat.block(1).equation = [ 36];
M_.block_structure_stat.block(1).variable = [ 39];
M_.block_structure_stat.block(2).Simulation_Type = 3;
M_.block_structure_stat.block(2).endo_nbr = 1;
M_.block_structure_stat.block(2).mfs = 1;
M_.block_structure_stat.block(2).equation = [ 37];
M_.block_structure_stat.block(2).variable = [ 36];
M_.block_structure_stat.block(3).Simulation_Type = 3;
M_.block_structure_stat.block(3).endo_nbr = 1;
M_.block_structure_stat.block(3).mfs = 1;
M_.block_structure_stat.block(3).equation = [ 38];
M_.block_structure_stat.block(3).variable = [ 38];
M_.block_structure_stat.block(4).Simulation_Type = 3;
M_.block_structure_stat.block(4).endo_nbr = 1;
M_.block_structure_stat.block(4).mfs = 1;
M_.block_structure_stat.block(4).equation = [ 40];
M_.block_structure_stat.block(4).variable = [ 37];
M_.block_structure_stat.block(5).Simulation_Type = 3;
M_.block_structure_stat.block(5).endo_nbr = 1;
M_.block_structure_stat.block(5).mfs = 1;
M_.block_structure_stat.block(5).equation = [ 41];
M_.block_structure_stat.block(5).variable = [ 43];
M_.block_structure_stat.block(6).Simulation_Type = 3;
M_.block_structure_stat.block(6).endo_nbr = 1;
M_.block_structure_stat.block(6).mfs = 1;
M_.block_structure_stat.block(6).equation = [ 42];
M_.block_structure_stat.block(6).variable = [ 41];
M_.block_structure_stat.block(7).Simulation_Type = 1;
M_.block_structure_stat.block(7).endo_nbr = 6;
M_.block_structure_stat.block(7).mfs = 6;
M_.block_structure_stat.block(7).equation = [ 46 47 48 54 61 62];
M_.block_structure_stat.block(7).variable = [ 46 47 48 50 61 62];
M_.block_structure_stat.block(8).Simulation_Type = 3;
M_.block_structure_stat.block(8).endo_nbr = 1;
M_.block_structure_stat.block(8).mfs = 1;
M_.block_structure_stat.block(8).equation = [ 39];
M_.block_structure_stat.block(8).variable = [ 40];
M_.block_structure_stat.block(9).Simulation_Type = 3;
M_.block_structure_stat.block(9).endo_nbr = 1;
M_.block_structure_stat.block(9).mfs = 1;
M_.block_structure_stat.block(9).equation = [ 43];
M_.block_structure_stat.block(9).variable = [ 42];
M_.block_structure_stat.block(10).Simulation_Type = 3;
M_.block_structure_stat.block(10).endo_nbr = 1;
M_.block_structure_stat.block(10).mfs = 1;
M_.block_structure_stat.block(10).equation = [ 44];
M_.block_structure_stat.block(10).variable = [ 44];
M_.block_structure_stat.block(11).Simulation_Type = 3;
M_.block_structure_stat.block(11).endo_nbr = 1;
M_.block_structure_stat.block(11).mfs = 1;
M_.block_structure_stat.block(11).equation = [ 45];
M_.block_structure_stat.block(11).variable = [ 45];
M_.block_structure_stat.block(12).Simulation_Type = 3;
M_.block_structure_stat.block(12).endo_nbr = 1;
M_.block_structure_stat.block(12).mfs = 1;
M_.block_structure_stat.block(12).equation = [ 13];
M_.block_structure_stat.block(12).variable = [ 16];
M_.block_structure_stat.block(13).Simulation_Type = 6;
M_.block_structure_stat.block(13).endo_nbr = 12;
M_.block_structure_stat.block(13).mfs = 12;
M_.block_structure_stat.block(13).equation = [ 22 23 24 25 26 27 28 29 30 31 32 33];
M_.block_structure_stat.block(13).variable = [ 24 26 27 35 29 31 32 23 25 34 28 30];
M_.block_structure_stat.block(14).Simulation_Type = 6;
M_.block_structure_stat.block(14).endo_nbr = 20;
M_.block_structure_stat.block(14).mfs = 20;
M_.block_structure_stat.block(14).equation = [ 18 19 20 21 12 35 1 2 3 17 4 5 6 11 15 16 7 8 9 10];
M_.block_structure_stat.block(14).variable = [ 8 12 19 10 15 7 2 5 6 18 1 9 3 14 13 4 20 22 21 11];
M_.block_structure_stat.block(15).Simulation_Type = 1;
M_.block_structure_stat.block(15).endo_nbr = 10;
M_.block_structure_stat.block(15).mfs = 10;
M_.block_structure_stat.block(15).equation = [ 59 60 58 51 50 49 52 57 56 55];
M_.block_structure_stat.block(15).variable = [ 59 60 58 56 55 54 53 57 52 51];
M_.block_structure_stat.block(16).Simulation_Type = 3;
M_.block_structure_stat.block(16).endo_nbr = 1;
M_.block_structure_stat.block(16).mfs = 1;
M_.block_structure_stat.block(16).equation = [ 53];
M_.block_structure_stat.block(16).variable = [ 49];
M_.block_structure_stat.block(17).Simulation_Type = 1;
M_.block_structure_stat.block(17).endo_nbr = 1;
M_.block_structure_stat.block(17).mfs = 1;
M_.block_structure_stat.block(17).equation = [ 14];
M_.block_structure_stat.block(17).variable = [ 17];
M_.block_structure_stat.block(18).Simulation_Type = 3;
M_.block_structure_stat.block(18).endo_nbr = 1;
M_.block_structure_stat.block(18).mfs = 1;
M_.block_structure_stat.block(18).equation = [ 34];
M_.block_structure_stat.block(18).variable = [ 33];
M_.block_structure_stat.variable_reordered = [ 39 36 38 37 43 41 46 47 48 50 61 62 40 42 44 45 16 24 26 27 35 29 31 32 23 25 34 28 30 8 12 19 10 15 7 2 5 6 18 1 9 3 14 13 4 20 22 21 11 59 60 58 56 55 54 53 57 52 51 49 17 33];
M_.block_structure_stat.equation_reordered = [ 36 37 38 40 41 42 46 47 48 54 61 62 39 43 44 45 13 22 23 24 25 26 27 28 29 30 31 32 33 18 19 20 21 12 35 1 2 3 17 4 5 6 11 15 16 7 8 9 10 59 60 58 51 50 49 52 57 56 55 53 14 34];
M_.block_structure_stat.incidence.sparse_IM = [
 1 2;
 1 3;
 1 36;
 2 5;
 2 37;
 3 2;
 3 3;
 3 5;
 3 6;
 3 36;
 4 1;
 4 4;
 4 7;
 4 8;
 4 38;
 5 7;
 5 9;
 5 10;
 5 39;
 6 3;
 6 20;
 6 21;
 6 22;
 7 11;
 7 20;
 7 40;
 8 11;
 8 22;
 8 40;
 8 45;
 9 11;
 9 21;
 9 40;
 9 44;
 10 6;
 10 11;
 10 12;
 10 39;
 11 3;
 11 14;
 11 42;
 12 12;
 12 13;
 12 14;
 12 15;
 12 41;
 13 16;
 13 42;
 14 14;
 14 15;
 14 17;
 15 1;
 15 13;
 16 4;
 16 18;
 16 37;
 17 8;
 17 9;
 17 18;
 18 6;
 18 8;
 19 6;
 19 9;
 19 10;
 19 12;
 20 2;
 20 3;
 20 19;
 20 43;
 21 10;
 21 15;
 22 24;
 22 36;
 23 26;
 23 37;
 24 24;
 24 26;
 24 27;
 24 36;
 25 23;
 25 25;
 25 28;
 25 35;
 25 38;
 26 29;
 26 30;
 26 35;
 26 39;
 27 27;
 27 31;
 27 39;
 28 30;
 28 31;
 28 32;
 28 41;
 29 23;
 29 32;
 30 25;
 30 34;
 30 37;
 31 28;
 31 29;
 31 34;
 32 27;
 32 28;
 33 27;
 33 29;
 33 30;
 33 31;
 34 30;
 34 33;
 35 7;
 35 19;
 35 35;
 36 39;
 37 36;
 38 38;
 39 40;
 39 61;
 40 37;
 41 43;
 42 41;
 43 42;
 43 62;
 44 44;
 44 61;
 45 45;
 45 61;
 46 46;
 47 47;
 48 48;
 49 20;
 49 54;
 50 21;
 50 55;
 51 22;
 51 56;
 52 53;
 52 54;
 52 55;
 52 56;
 53 49;
 53 53;
 54 50;
 55 14;
 55 51;
 56 2;
 56 52;
 57 2;
 57 57;
 58 3;
 58 58;
 58 59;
 58 60;
 59 3;
 59 59;
 60 59;
 60 60;
 61 61;
 62 62;
];
M_.block_structure_stat.tmp_nbr = 0;
M_.block_structure_stat.block(1).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(1).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(1).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(2).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(2).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(2).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(3).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(3).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(3).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(4).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(4).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(4).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(5).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(5).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(5).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(6).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(6).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(6).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(7).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(7).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(7).g1_sparse_colptr = int32([]);
M_.block_structure_stat.block(8).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(8).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(8).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(9).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(9).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(9).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(10).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(10).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(10).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(11).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(11).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(11).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(12).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(12).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(12).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(13).g1_sparse_rowval = int32([1 3 2 3 3 6 11 12 4 5 5 10 12 6 7 12 7 8 4 8 4 9 9 10 4 10 11 5 7 12 ]);
M_.block_structure_stat.block(13).g1_sparse_colval = int32([1 1 2 2 3 3 3 3 4 4 5 5 5 6 6 6 7 7 8 8 9 9 10 10 11 11 11 12 12 12 ]);
M_.block_structure_stat.block(13).g1_sparse_colptr = int32([1 3 5 9 11 14 17 19 21 23 25 28 31 ]);
M_.block_structure_stat.block(14).g1_sparse_rowval = int32([1 10 11 2 5 20 3 6 2 4 12 4 5 6 11 12 3 7 9 8 9 1 2 9 20 10 16 11 15 2 10 12 3 7 9 13 14 5 14 5 15 11 16 13 17 13 18 13 19 17 18 19 20 ]);
M_.block_structure_stat.block(14).g1_sparse_colval = int32([1 1 1 2 2 2 3 3 4 4 4 5 5 6 6 6 7 7 7 8 8 9 9 9 9 10 10 11 11 12 12 12 13 13 13 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 20 20 ]);
M_.block_structure_stat.block(14).g1_sparse_colptr = int32([1 4 7 9 12 14 17 20 22 26 28 30 33 38 40 42 44 46 48 50 54 ]);
M_.block_structure_stat.block(15).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(15).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(15).g1_sparse_colptr = int32([]);
M_.block_structure_stat.block(16).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(16).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(16).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(17).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(17).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(17).g1_sparse_colptr = int32([]);
M_.block_structure_stat.block(18).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(18).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(18).g1_sparse_colptr = int32([1 2 ]);
M_.static_g1_sparse_rowval = int32([4 15 1 3 20 56 57 1 3 6 11 20 58 59 4 16 2 3 3 10 18 19 4 5 35 4 17 18 5 17 19 5 19 21 7 8 9 10 10 12 19 12 15 11 12 14 55 12 14 21 13 14 16 17 20 35 6 7 49 6 9 50 6 8 51 25 29 22 24 25 30 23 24 24 27 32 33 25 31 32 26 31 33 26 28 33 34 27 28 33 28 29 34 30 31 25 26 35 1 3 22 24 37 2 16 23 30 40 4 25 38 5 10 26 27 36 7 8 9 39 12 28 42 11 13 43 20 41 9 44 8 45 46 47 48 53 54 55 56 52 53 49 52 50 52 51 52 57 58 58 59 60 58 60 39 44 45 61 43 62 ]);
M_.static_g1_sparse_colval = int32([1 1 2 2 2 2 2 3 3 3 3 3 3 3 4 4 5 5 6 6 6 6 7 7 7 8 8 8 9 9 9 10 10 10 11 11 11 11 12 12 12 13 13 14 14 14 14 15 15 15 16 17 18 18 19 19 20 20 20 21 21 21 22 22 22 23 23 24 24 25 25 26 26 27 27 27 27 28 28 28 29 29 29 30 30 30 30 31 31 31 32 32 33 34 34 35 35 35 36 36 36 36 36 37 37 37 37 37 38 38 38 39 39 39 39 39 40 40 40 40 41 41 41 42 42 42 43 43 44 44 45 45 46 47 48 49 50 51 52 53 53 54 54 55 55 56 56 57 58 59 59 59 60 60 61 61 61 61 62 62 ]);
M_.static_g1_sparse_colptr = int32([1 3 8 15 17 19 23 26 29 32 35 39 42 44 48 51 52 53 55 57 60 63 66 68 70 72 74 78 81 84 88 91 93 94 96 99 104 109 112 117 121 124 127 129 131 133 134 135 136 137 138 139 140 142 144 146 148 149 150 153 155 159 161 ]);
M_.params(7) = 0.226791;
c_alpha = M_.params(7);
M_.params(34) = 0.26856;
c_beta_bar = M_.params(34);
M_.params(5) = 0.025;
c_delta = M_.params(5);
M_.params(33) = 0.226367;
c_e_bar = M_.params(33);
M_.params(10) = 10;
c_eps_p = M_.params(10);
M_.params(8) = 0.250432;
c_gamma_p = M_.params(8);
M_.params(11) = 0.251781;
c_gamma_w = M_.params(11);
M_.params(26) = 0.18;
c_gy = M_.params(26);
M_.params(1) = 0.635318;
c_h = M_.params(1);
M_.params(57) = 0.570707;
c_mu_p = M_.params(57);
M_.params(60) = 0.82667;
c_mu_w = M_.params(60);
M_.params(14) = 5.385964;
c_omega = M_.params(14);
M_.params(4) = 4.630882;
c_phi = M_.params(4);
M_.params(30) = 0.56137;
c_pi_bar = M_.params(30);
M_.params(16) = 0.47281;
c_psi = M_.params(16);
M_.params(6) = 1.490662;
c_psi_p = M_.params(6);
M_.params(35) = 1.500236;
c_psi_w = M_.params(35);
M_.params(20) = 0.016608;
c_rdy = M_.params(20);
M_.params(54) = 0.982716;
c_rho_a = M_.params(54);
M_.params(51) = 0.915697;
c_rho_b = M_.params(51);
M_.params(53) = 0.992875;
c_rho_g = M_.params(53);
M_.params(55) = 0.196454;
c_rho_ga = M_.params(55);
M_.params(17) = 0.856383;
c_rho_intr = M_.params(17);
M_.params(56) = 0.624064;
c_rho_p = M_.params(56);
M_.params(62) = 0.624064;
c_rho_p_energy = M_.params(62);
M_.params(63) = 0.624064;
c_rho_p_food = M_.params(63);
M_.params(52) = 0.345078;
c_rho_q = M_.params(52);
M_.params(61) = 0.316487;
c_rho_r = M_.params(61);
M_.params(58) = 0.999;
c_rho_s = M_.params(58);
M_.params(59) = 0.90539;
c_rho_w = M_.params(59);
M_.params(18) = 1.287264;
c_rpi = M_.params(18);
M_.params(19) = 0.192124;
c_ry = M_.params(19);
M_.params(28) = 0.130848;
c_tau_bar = M_.params(28);
M_.params(21) = 0.705567;
c_theta_e = M_.params(21);
M_.params(9) = 0.842802;
c_theta_p = M_.params(9);
M_.params(12) = 0.696311;
c_theta_w = M_.params(12);
M_.params(15) = 0.085281;
c_v = M_.params(15);
M_.params(36) = 0.11;
c_w_energy = M_.params(36);
M_.params(37) = 0.21;
c_w_food = M_.params(37);
M_.params(2) = 1+M_.params(28)/100;
c_tau = M_.params(2);
M_.params(3) = 1/(1+M_.params(34)/100);
c_beta = M_.params(3);
M_.params(29) = 1+M_.params(30)/100;
c_pi = M_.params(29);
M_.params(32) = 100*(M_.params(35)-1)/M_.params(14);
c_u_bar = M_.params(32);
M_.params(31) = 100*(M_.params(29)*M_.params(2)/M_.params(3)-1);
c_r_bar = M_.params(31);
M_.params(13) = M_.params(35)/(M_.params(35)-1);
c_eps_w = M_.params(13);
M_.params(22) = M_.params(2)/M_.params(3)+M_.params(5)-1;
c_rk = M_.params(22);
M_.params(39) = (M_.params(7)^M_.params(7)*(1-M_.params(7))^(1-M_.params(7))/(M_.params(6)*M_.params(22)^M_.params(7)))^(1/(1-M_.params(7)));
c_w = M_.params(39);
M_.params(38) = (1-M_.params(7))/M_.params(7)*M_.params(22)/M_.params(39);
c_lk = M_.params(38);
M_.params(27) = M_.params(6)*M_.params(38)^(M_.params(7)-1);
c_ky = M_.params(27);
M_.params(24) = (M_.params(2)+M_.params(5)-1)*M_.params(27);
c_iy = M_.params(24);
M_.params(23) = 1-M_.params(24)-M_.params(26);
c_cy = M_.params(23);
M_.params(25) = M_.params(22)*M_.params(27);
c_vy = M_.params(25);
M_.params(40) = 1/(1+M_.params(1)/M_.params(2));
c1 = M_.params(40);
M_.params(41) = (1-M_.params(1)/M_.params(2))/(1+M_.params(1)/M_.params(2));
c2 = M_.params(41);
M_.params(42) = 1/(1+M_.params(3));
i1 = M_.params(42);
M_.params(43) = M_.params(42)/(M_.params(2)^2*M_.params(4));
i2 = M_.params(43);
M_.params(44) = M_.params(22)/(1+M_.params(22)-M_.params(5));
q1 = M_.params(44);
M_.params(45) = M_.params(3);
pi1 = M_.params(45);
M_.params(46) = (1-M_.params(3)*M_.params(9))*(1-M_.params(9))/(M_.params(9)*(1+(M_.params(6)-1)*M_.params(10)));
pi2 = M_.params(46);
M_.params(47) = (1-M_.params(3)*M_.params(12))*(1-M_.params(12))/(M_.params(12)*(1+M_.params(14)*M_.params(13)));
w1 = M_.params(47);
M_.params(48) = (1-M_.params(5))/M_.params(2);
k1 = M_.params(48);
M_.params(49) = M_.params(4)*M_.params(2)*(M_.params(2)+M_.params(5)-1)*(1+M_.params(3));
k2 = M_.params(49);
M_.params(50) = (1-M_.params(3)*M_.params(21))*(1-M_.params(21))/M_.params(21);
e1 = M_.params(50);
steady;
oo_.dr.eigval = check(M_,options_,oo_);
%
% SHOCKS instructions
%
M_.exo_det_length = 0;
M_.Sigma_e(1, 1) = (0.254028)^2;
M_.Sigma_e(2, 2) = (0.485825)^2;
M_.Sigma_e(3, 3) = (0.305013)^2;
M_.Sigma_e(4, 4) = (0.570053)^2;
M_.Sigma_e(5, 5) = (0.379025)^2;
M_.Sigma_e(6, 6) = (1.012299)^2;
M_.Sigma_e(7, 7) = (0.354961)^2;
M_.Sigma_e(8, 8) = (0.111101)^2;
M_.Sigma_e(9, 9) = (0.379025)^2;
M_.Sigma_e(10, 10) = (0.379025)^2;
if isempty(estim_params_)
    estim_params_.var_exo = zeros(0, 10);
    estim_params_.var_endo = zeros(0, 10);
    estim_params_.corrx = zeros(0, 11);
    estim_params_.corrn = zeros(0, 11);
    estim_params_.param_vals = zeros(0, 10);
end
if ~isempty(find(estim_params_.var_exo(:,1)==4))
    error('The standard deviation for eta_a has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 4, 0.254028, 0.01, 3, 4, 0.1, 2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==1))
    error('The standard deviation for eta_b has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 1, 0.254028, 0.025, 5, 4, 0.1, 2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==3))
    error('The standard deviation for eta_g has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 3, 0.305013, 0.01, 3, 4, 0.1, 2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==2))
    error('The standard deviation for eta_q has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 2, 0.485825, 0.01, 3, 4, 0.1, 2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==8))
    error('The standard deviation for eta_r has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 8, 0.111101, 0.01, 3, 4, 0.1, 2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==5))
    error('The standard deviation for eta_p has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 5, 0.379025, 0.01, 3, 4, 0.1, 2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==7))
    error('The standard deviation for eta_w has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 7, 0.354961, 0.01, 3, 4, 0.1, 2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==6))
    error('The standard deviation for eta_s has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 6, 1.012299, 0.01, 5, 4, 0.1, 2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==9))
    error('The standard deviation for eta_p_energy has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 9, 0.379025, 0.01, 3, 4, 0.1, 2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==10))
    error('The standard deviation for eta_p_food has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 10, 0.379025, 0.01, 3, 4, 0.1, 2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==54))
    error('Parameter c_rho_a has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 54, 0.982716, .01, .9999, 1, 0.5, 0.20, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==51))
    error('Parameter c_rho_b has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 51, 0.915697, .01, .9999, 1, 0.5, 0.20, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==52))
    error('Parameter c_rho_q has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 52, 0.345078, .01, .9999, 1, 0.5, 0.20, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==53))
    error('Parameter c_rho_g has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 53, 0.992875, .01, .9999, 1, 0.5, 0.20, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==55))
    error('Parameter c_rho_ga has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 55, 0.196454, .01, .9999, 1, 0.5, 0.20, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==56))
    error('Parameter c_rho_p has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 56, 0.624064, .01, .9999, 1, 0.5, 0.20, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==59))
    error('Parameter c_rho_w has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 59, 0.905390, .01, .9999, 1, 0.5, 0.20, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==61))
    error('Parameter c_rho_r has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 61, 0.316487, .01, .9999, 1, 0.5, 0.20, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==57))
    error('Parameter c_mu_p has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 57, 0.570707, .01, .9999, 1, 0.5, 0.20, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==60))
    error('Parameter c_mu_w has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 60, 0.826670, .01, .9999, 1, 0.5, 0.20, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==62))
    error('Parameter c_rho_p_energy has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 62, 0.624064, .01, .9999, 1, 0.5, 0.20, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==63))
    error('Parameter c_rho_p_food has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 63, 0.624064, .01, .9999, 1, 0.5, 0.20, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==7))
    error('Parameter c_alpha has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 7, 0.24, 0.01, 1.0, 3, 0.3, 0.05, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==34))
    error('Parameter c_beta_bar has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 34, 0.7420, 0.01, 2.0, 2, 0.25, 0.1, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==33))
    error('Parameter c_e_bar has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 33, 1.2918, (-10.0), 10.0, 3, 0.0, 2.0, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==11))
    error('Parameter c_gamma_w has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 11, 0.4425, 0.01, 0.99, 1, 0.5, 0.15, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==8))
    error('Parameter c_gamma_p has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 8, 0.3291, 0.01, 0.99, 1, 0.5, 0.15, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==1))
    error('Parameter c_h has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 1, 0.7205, 0.001, 0.99, 1, 0.7, 0.1, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==6))
    error('Parameter c_psi_p has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 6, 1.4672, 1.0, 3, 3, 1.25, 0.125, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==30))
    error('Parameter c_pi_bar has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 30, 0.7, 0.1, 2.0, 2, 0.625, 0.1, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==4))
    error('Parameter c_phi has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 4, 6.3325, 2, 15, 3, 4, 1.5, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==16))
    error('Parameter c_psi has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 16, 0.2648, 0.01, 1, 1, 0.5, 0.15, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==17))
    error('Parameter c_rho_intr has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 17, 0.8258, 0.5, 0.975, 1, 0.75, 0.10, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==18))
    error('Parameter c_rpi has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 18, 1.7985, 1.0, 3, 3, 1.5, 0.25, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==20))
    error('Parameter c_rdy has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 20, 0.2239, 0.001, 0.5, 3, 0.125, 0.05, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==19))
    error('Parameter c_ry has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 19, 0.0893, 0.001, 0.5, 3, 0.125, 0.05, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==14))
    error('Parameter c_omega has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 14, 2.8401, 0.25, 10, 3, 2, 0.75, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==28))
    error('Parameter c_tau_bar has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 28, 0.3982, 0.1, 0.8, 3, 0.4, 0.10, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==9))
    error('Parameter c_theta_p has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 9, 0.7813, 0.5, 0.95, 1, 0.5, 0.10, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==12))
    error('Parameter c_theta_w has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 12, 0.7937, 0.3, 0.95, 1, 0.5, 0.1, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==15))
    error('Parameter c_v has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 15, 1.2312, 0.25, 3, 3, 1.50, 0.375, NaN, NaN, NaN ];
options_.TeX = true;
options_.datafile = 'SWW2014_data.mat';
options_.first_obs = 1;
options_.lik_init = 2;
options_.mh_drop = 0.2;
options_.mh_jscale = 0.20;
options_.mh_nblck = 2;
options_.mh_replic = 0;
options_.mode_compute = 6;
options_.nodiagnostic = true;
options_.nograph = true;
options_.optim_opt = '''MaxIter'',200';
options_.prefilter = 0;
options_.presample = 4;
options_.order = 1;
var_list_ = {};
oo_recursive_=dynare_estimation(var_list_);
var_list_ = {'dy_obs';'pi_obs'};
oo_ = shock_decomposition(M_,oo_,options_,var_list_,bayestopt_,estim_params_);
options_.irf = 21;
options_.order = 2;
options_.periods = 1000;
var_list_ = {'pi'};
[info, oo_, options_, M_] = stoch_simul(M_, options_, oo_, var_list_);


oo_.time = toc(tic0);
disp(['Total computing time : ' dynsec2hms(oo_.time) ]);
if ~exist([M_.dname filesep 'Output'],'dir')
    mkdir(M_.dname,'Output');
end
save([M_.dname filesep 'Output' filesep 'EA_SWW14_rep_results.mat'], 'oo_', 'M_', 'options_');
if exist('estim_params_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'EA_SWW14_rep_results.mat'], 'estim_params_', '-append');
end
if exist('bayestopt_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'EA_SWW14_rep_results.mat'], 'bayestopt_', '-append');
end
if exist('dataset_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'EA_SWW14_rep_results.mat'], 'dataset_', '-append');
end
if exist('estimation_info', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'EA_SWW14_rep_results.mat'], 'estimation_info', '-append');
end
if exist('dataset_info', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'EA_SWW14_rep_results.mat'], 'dataset_info', '-append');
end
if exist('oo_recursive_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'EA_SWW14_rep_results.mat'], 'oo_recursive_', '-append');
end
if exist('options_mom_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'EA_SWW14_rep_results.mat'], 'options_mom_', '-append');
end
if ~isempty(lastwarn)
  disp('Note: warning(s) encountered in MATLAB/Octave code')
end
